.. _advanced_foreword:

对有经验的编程者开门见山
====================================

Flask 中的线程本地化
----------------------

Flask 中设计决策之一是简化许多应该是简单的众多任务；
这些任务不需要大量代码，并且也不应该限制你们。
基于这一点，Flask 有了较少的设计选项，有些人也许发现
不可思议或不够正统。例如，Flask 内部使用了线程本地化对象，
所以你们不用被迫把函数中的许多对象按顺序代入到一个请求函数中来保持线程安全。
这种方法是一种惯例，但需要一个合法的请求语境给依赖注射，
或者当想要重复使用代码时，让复用代码使用一个值挂到请求上去。
Flask 项目对待线程本地化是诚实的，不像其它框架会隐藏它们，
所以存在安全隐患，并且在代码中来调用本地化对象和所用位置的文档。

对于网络开发来说要心存谨慎
--------------------------------

当建立网络应用时总要把安全性记在心里。

如果你写了一个网络应用的话，你可能正在运行用户注册并把他们当数据保留在你的服务器上。
用户们信任你所含有的数据。即使你们只让用户把数据保存在你的网络应用中，你依然要安全地存储数据。

不幸的是，一个网络应用的安全性上有太多方法可以让其妥协。Flask 保护你远离大多数共性的
安全问题，现代网络应用的安全问题例如：跨站脚本（XSS）。除非你故意地把缺少安全地 HTML
标记成安全，Flask 和 核心 Jinja2 模版引擎罩着你。但依然有更多的方法来导致安全问题。

文档会警告你关于网络开发方面需要注意的安全。有些安全考虑的都是更多层化的想法，
并且我们有时候都是低估了可能会暴露的漏洞 - 直到一名聪明的攻击者指出一个方法
来揭露我们的网络应用。并且不要想着你的网络应用对于那些攻击者来说不重要。
根据攻击的类型，那些自动化机器人的变化都正在探索许多方法来用垃圾来填充你的数据库，
千奇百改的恶意软件超链接，以及诸如此类的事情。

Flask 与其它任何一个框架在安全领域中没有什么不同，作为开发者的你必须在建造时心存谨慎，
当建立你的需求时要针对曝光问题思考一番。
